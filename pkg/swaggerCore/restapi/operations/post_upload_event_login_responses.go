// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"augeu/public/pkg/swaggerCore/models"
)

// PostUploadEventLoginOKCode is the HTTP code returned for type PostUploadEventLoginOK
const PostUploadEventLoginOKCode int = 200

/*
PostUploadEventLoginOK 事件日志上传成功

swagger:response postUploadEventLoginOK
*/
type PostUploadEventLoginOK struct {

	/*
	  In: Body
	*/
	Payload *models.EventLogUploadResponse `json:"body,omitempty"`
}

// NewPostUploadEventLoginOK creates PostUploadEventLoginOK with default headers values
func NewPostUploadEventLoginOK() *PostUploadEventLoginOK {

	return &PostUploadEventLoginOK{}
}

// WithPayload adds the payload to the post upload event login o k response
func (o *PostUploadEventLoginOK) WithPayload(payload *models.EventLogUploadResponse) *PostUploadEventLoginOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post upload event login o k response
func (o *PostUploadEventLoginOK) SetPayload(payload *models.EventLogUploadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUploadEventLoginOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUploadEventLoginBadRequestCode is the HTTP code returned for type PostUploadEventLoginBadRequest
const PostUploadEventLoginBadRequestCode int = 400

/*
PostUploadEventLoginBadRequest 输入参数错误

swagger:response postUploadEventLoginBadRequest
*/
type PostUploadEventLoginBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequestError `json:"body,omitempty"`
}

// NewPostUploadEventLoginBadRequest creates PostUploadEventLoginBadRequest with default headers values
func NewPostUploadEventLoginBadRequest() *PostUploadEventLoginBadRequest {

	return &PostUploadEventLoginBadRequest{}
}

// WithPayload adds the payload to the post upload event login bad request response
func (o *PostUploadEventLoginBadRequest) WithPayload(payload *models.BadRequestError) *PostUploadEventLoginBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post upload event login bad request response
func (o *PostUploadEventLoginBadRequest) SetPayload(payload *models.BadRequestError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUploadEventLoginBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUploadEventLoginInternalServerErrorCode is the HTTP code returned for type PostUploadEventLoginInternalServerError
const PostUploadEventLoginInternalServerErrorCode int = 500

/*
PostUploadEventLoginInternalServerError 内部错误

swagger:response postUploadEventLoginInternalServerError
*/
type PostUploadEventLoginInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ActionFailure `json:"body,omitempty"`
}

// NewPostUploadEventLoginInternalServerError creates PostUploadEventLoginInternalServerError with default headers values
func NewPostUploadEventLoginInternalServerError() *PostUploadEventLoginInternalServerError {

	return &PostUploadEventLoginInternalServerError{}
}

// WithPayload adds the payload to the post upload event login internal server error response
func (o *PostUploadEventLoginInternalServerError) WithPayload(payload *models.ActionFailure) *PostUploadEventLoginInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post upload event login internal server error response
func (o *PostUploadEventLoginInternalServerError) SetPayload(payload *models.ActionFailure) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUploadEventLoginInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
