// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"augeu/public/pkg/swaggerCore/models"
)

// PostUpdataRdpEventOKCode is the HTTP code returned for type PostUpdataRdpEventOK
const PostUpdataRdpEventOKCode int = 200

/*
PostUpdataRdpEventOK 上传成功

swagger:response postUpdataRdpEventOK
*/
type PostUpdataRdpEventOK struct {

	/*
	  In: Body
	*/
	Payload *models.SuccessResponse `json:"body,omitempty"`
}

// NewPostUpdataRdpEventOK creates PostUpdataRdpEventOK with default headers values
func NewPostUpdataRdpEventOK() *PostUpdataRdpEventOK {

	return &PostUpdataRdpEventOK{}
}

// WithPayload adds the payload to the post updata rdp event o k response
func (o *PostUpdataRdpEventOK) WithPayload(payload *models.SuccessResponse) *PostUpdataRdpEventOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post updata rdp event o k response
func (o *PostUpdataRdpEventOK) SetPayload(payload *models.SuccessResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdataRdpEventOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUpdataRdpEventBadRequestCode is the HTTP code returned for type PostUpdataRdpEventBadRequest
const PostUpdataRdpEventBadRequestCode int = 400

/*
PostUpdataRdpEventBadRequest 输入参数错误

swagger:response postUpdataRdpEventBadRequest
*/
type PostUpdataRdpEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequestError `json:"body,omitempty"`
}

// NewPostUpdataRdpEventBadRequest creates PostUpdataRdpEventBadRequest with default headers values
func NewPostUpdataRdpEventBadRequest() *PostUpdataRdpEventBadRequest {

	return &PostUpdataRdpEventBadRequest{}
}

// WithPayload adds the payload to the post updata rdp event bad request response
func (o *PostUpdataRdpEventBadRequest) WithPayload(payload *models.BadRequestError) *PostUpdataRdpEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post updata rdp event bad request response
func (o *PostUpdataRdpEventBadRequest) SetPayload(payload *models.BadRequestError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdataRdpEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUpdataRdpEventForbiddenCode is the HTTP code returned for type PostUpdataRdpEventForbidden
const PostUpdataRdpEventForbiddenCode int = 403

/*
PostUpdataRdpEventForbidden 没有权限

swagger:response postUpdataRdpEventForbidden
*/
type PostUpdataRdpEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.UnauthorizedError `json:"body,omitempty"`
}

// NewPostUpdataRdpEventForbidden creates PostUpdataRdpEventForbidden with default headers values
func NewPostUpdataRdpEventForbidden() *PostUpdataRdpEventForbidden {

	return &PostUpdataRdpEventForbidden{}
}

// WithPayload adds the payload to the post updata rdp event forbidden response
func (o *PostUpdataRdpEventForbidden) WithPayload(payload *models.UnauthorizedError) *PostUpdataRdpEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post updata rdp event forbidden response
func (o *PostUpdataRdpEventForbidden) SetPayload(payload *models.UnauthorizedError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdataRdpEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUpdataRdpEventInternalServerErrorCode is the HTTP code returned for type PostUpdataRdpEventInternalServerError
const PostUpdataRdpEventInternalServerErrorCode int = 500

/*
PostUpdataRdpEventInternalServerError 内部错误

swagger:response postUpdataRdpEventInternalServerError
*/
type PostUpdataRdpEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ActionFailure `json:"body,omitempty"`
}

// NewPostUpdataRdpEventInternalServerError creates PostUpdataRdpEventInternalServerError with default headers values
func NewPostUpdataRdpEventInternalServerError() *PostUpdataRdpEventInternalServerError {

	return &PostUpdataRdpEventInternalServerError{}
}

// WithPayload adds the payload to the post updata rdp event internal server error response
func (o *PostUpdataRdpEventInternalServerError) WithPayload(payload *models.ActionFailure) *PostUpdataRdpEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post updata rdp event internal server error response
func (o *PostUpdataRdpEventInternalServerError) SetPayload(payload *models.ActionFailure) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdataRdpEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
