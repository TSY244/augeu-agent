// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostGetApplicationEventHandlerFunc turns a function with the right signature into a post get application event handler
type PostGetApplicationEventHandlerFunc func(PostGetApplicationEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGetApplicationEventHandlerFunc) Handle(params PostGetApplicationEventParams) middleware.Responder {
	return fn(params)
}

// PostGetApplicationEventHandler interface for that can handle valid post get application event params
type PostGetApplicationEventHandler interface {
	Handle(PostGetApplicationEventParams) middleware.Responder
}

// NewPostGetApplicationEvent creates a new http.Handler for the post get application event operation
func NewPostGetApplicationEvent(ctx *middleware.Context, handler PostGetApplicationEventHandler) *PostGetApplicationEvent {
	return &PostGetApplicationEvent{Context: ctx, Handler: handler}
}

/*
	PostGetApplicationEvent swagger:route POST /get/applicationEvent postGetApplicationEvent

查询应用日志事件
*/
type PostGetApplicationEvent struct {
	Context *middleware.Context
	Handler PostGetApplicationEventHandler
}

func (o *PostGetApplicationEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostGetApplicationEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
