// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostGetLoginEventHandlerFunc turns a function with the right signature into a post get login event handler
type PostGetLoginEventHandlerFunc func(PostGetLoginEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGetLoginEventHandlerFunc) Handle(params PostGetLoginEventParams) middleware.Responder {
	return fn(params)
}

// PostGetLoginEventHandler interface for that can handle valid post get login event params
type PostGetLoginEventHandler interface {
	Handle(PostGetLoginEventParams) middleware.Responder
}

// NewPostGetLoginEvent creates a new http.Handler for the post get login event operation
func NewPostGetLoginEvent(ctx *middleware.Context, handler PostGetLoginEventHandler) *PostGetLoginEvent {
	return &PostGetLoginEvent{Context: ctx, Handler: handler}
}

/*
	PostGetLoginEvent swagger:route POST /get/loginEvent postGetLoginEvent

查询登录事件
*/
type PostGetLoginEvent struct {
	Context *middleware.Context
	Handler PostGetLoginEventHandler
}

func (o *PostGetLoginEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostGetLoginEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
