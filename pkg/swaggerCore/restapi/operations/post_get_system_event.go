// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostGetSystemEventHandlerFunc turns a function with the right signature into a post get system event handler
type PostGetSystemEventHandlerFunc func(PostGetSystemEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGetSystemEventHandlerFunc) Handle(params PostGetSystemEventParams) middleware.Responder {
	return fn(params)
}

// PostGetSystemEventHandler interface for that can handle valid post get system event params
type PostGetSystemEventHandler interface {
	Handle(PostGetSystemEventParams) middleware.Responder
}

// NewPostGetSystemEvent creates a new http.Handler for the post get system event operation
func NewPostGetSystemEvent(ctx *middleware.Context, handler PostGetSystemEventHandler) *PostGetSystemEvent {
	return &PostGetSystemEvent{Context: ctx, Handler: handler}
}

/*
	PostGetSystemEvent swagger:route POST /get/systemEvent postGetSystemEvent

查询系统日志事件
*/
type PostGetSystemEvent struct {
	Context *middleware.Context
	Handler PostGetSystemEventHandler
}

func (o *PostGetSystemEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostGetSystemEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
