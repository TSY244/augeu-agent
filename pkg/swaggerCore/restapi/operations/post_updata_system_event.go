// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUpdataSystemEventHandlerFunc turns a function with the right signature into a post updata system event handler
type PostUpdataSystemEventHandlerFunc func(PostUpdataSystemEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUpdataSystemEventHandlerFunc) Handle(params PostUpdataSystemEventParams) middleware.Responder {
	return fn(params)
}

// PostUpdataSystemEventHandler interface for that can handle valid post updata system event params
type PostUpdataSystemEventHandler interface {
	Handle(PostUpdataSystemEventParams) middleware.Responder
}

// NewPostUpdataSystemEvent creates a new http.Handler for the post updata system event operation
func NewPostUpdataSystemEvent(ctx *middleware.Context, handler PostUpdataSystemEventHandler) *PostUpdataSystemEvent {
	return &PostUpdataSystemEvent{Context: ctx, Handler: handler}
}

/*
	PostUpdataSystemEvent swagger:route POST /updata/systemEvent postUpdataSystemEvent

上传系统日志事件
*/
type PostUpdataSystemEvent struct {
	Context *middleware.Context
	Handler PostUpdataSystemEventHandler
}

func (o *PostUpdataSystemEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUpdataSystemEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
