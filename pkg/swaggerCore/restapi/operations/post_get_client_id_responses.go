// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"augeu/public/pkg/swaggerCore/models"
)

// PostGetClientIDOKCode is the HTTP code returned for type PostGetClientIDOK
const PostGetClientIDOKCode int = 200

/*
PostGetClientIDOK 返回 Augeu Api 版本号

swagger:response postGetClientIdOK
*/
type PostGetClientIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetClientIDResponse `json:"body,omitempty"`
}

// NewPostGetClientIDOK creates PostGetClientIDOK with default headers values
func NewPostGetClientIDOK() *PostGetClientIDOK {

	return &PostGetClientIDOK{}
}

// WithPayload adds the payload to the post get client Id o k response
func (o *PostGetClientIDOK) WithPayload(payload *models.GetClientIDResponse) *PostGetClientIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post get client Id o k response
func (o *PostGetClientIDOK) SetPayload(payload *models.GetClientIDResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostGetClientIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostGetClientIDUnauthorizedCode is the HTTP code returned for type PostGetClientIDUnauthorized
const PostGetClientIDUnauthorizedCode int = 401

/*
PostGetClientIDUnauthorized 没有权限

swagger:response postGetClientIdUnauthorized
*/
type PostGetClientIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.UnauthorizedError `json:"body,omitempty"`
}

// NewPostGetClientIDUnauthorized creates PostGetClientIDUnauthorized with default headers values
func NewPostGetClientIDUnauthorized() *PostGetClientIDUnauthorized {

	return &PostGetClientIDUnauthorized{}
}

// WithPayload adds the payload to the post get client Id unauthorized response
func (o *PostGetClientIDUnauthorized) WithPayload(payload *models.UnauthorizedError) *PostGetClientIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post get client Id unauthorized response
func (o *PostGetClientIDUnauthorized) SetPayload(payload *models.UnauthorizedError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostGetClientIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostGetClientIDInternalServerErrorCode is the HTTP code returned for type PostGetClientIDInternalServerError
const PostGetClientIDInternalServerErrorCode int = 500

/*
PostGetClientIDInternalServerError 内部错误

swagger:response postGetClientIdInternalServerError
*/
type PostGetClientIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ActionFailure `json:"body,omitempty"`
}

// NewPostGetClientIDInternalServerError creates PostGetClientIDInternalServerError with default headers values
func NewPostGetClientIDInternalServerError() *PostGetClientIDInternalServerError {

	return &PostGetClientIDInternalServerError{}
}

// WithPayload adds the payload to the post get client Id internal server error response
func (o *PostGetClientIDInternalServerError) WithPayload(payload *models.ActionFailure) *PostGetClientIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post get client Id internal server error response
func (o *PostGetClientIDInternalServerError) SetPayload(payload *models.ActionFailure) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostGetClientIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
