// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemInfo system info
//
// swagger:model SystemInfo
type SystemInfo struct {

	// 操作系统架构
	// Required: true
	OsArch *string `json:"os_arch"`

	// 操作系统名称
	// Required: true
	OsName *string `json:"os_name"`

	// 操作系统版本
	// Required: true
	OsVersion *string `json:"os_version"`

	// 补丁列表
	// Required: true
	Patchs []*Patch `json:"patchs"`
}

// Validate validates this system info
func (m *SystemInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsArch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatchs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemInfo) validateOsArch(formats strfmt.Registry) error {

	if err := validate.Required("os_arch", "body", m.OsArch); err != nil {
		return err
	}

	return nil
}

func (m *SystemInfo) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("os_name", "body", m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *SystemInfo) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *SystemInfo) validatePatchs(formats strfmt.Registry) error {

	if err := validate.Required("patchs", "body", m.Patchs); err != nil {
		return err
	}

	for i := 0; i < len(m.Patchs); i++ {
		if swag.IsZero(m.Patchs[i]) { // not required
			continue
		}

		if m.Patchs[i] != nil {
			if err := m.Patchs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patchs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("patchs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this system info based on the context it is used
func (m *SystemInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePatchs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemInfo) contextValidatePatchs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Patchs); i++ {

		if m.Patchs[i] != nil {

			if swag.IsZero(m.Patchs[i]) { // not required
				return nil
			}

			if err := m.Patchs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patchs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("patchs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemInfo) UnmarshalBinary(b []byte) error {
	var res SystemInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
