// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDPEventUpload r d p event upload
//
// swagger:model RDPEventUpload
type RDPEventUpload struct {

	// 登录用户域
	// Required: true
	AccountDomain *string `json:"AccountDomain"`

	// 登录用户名
	// Example: admin
	// Required: true
	AccountName *string `json:"AccountName"`

	// 事件基本信息
	// Required: true
	Base *EventBase `json:"Base"`

	// 客户端地址
	// Required: true
	ClientAddress *string `json:"ClientAddress"`

	// 客户端名称
	// Required: true
	ClientName *string `json:"ClientName"`
}

// Validate validates this r d p event upload
func (m *RDPEventUpload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RDPEventUpload) validateAccountDomain(formats strfmt.Registry) error {

	if err := validate.Required("AccountDomain", "body", m.AccountDomain); err != nil {
		return err
	}

	return nil
}

func (m *RDPEventUpload) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("AccountName", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *RDPEventUpload) validateBase(formats strfmt.Registry) error {

	if err := validate.Required("Base", "body", m.Base); err != nil {
		return err
	}

	if m.Base != nil {
		if err := m.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Base")
			}
			return err
		}
	}

	return nil
}

func (m *RDPEventUpload) validateClientAddress(formats strfmt.Registry) error {

	if err := validate.Required("ClientAddress", "body", m.ClientAddress); err != nil {
		return err
	}

	return nil
}

func (m *RDPEventUpload) validateClientName(formats strfmt.Registry) error {

	if err := validate.Required("ClientName", "body", m.ClientName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this r d p event upload based on the context it is used
func (m *RDPEventUpload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RDPEventUpload) contextValidateBase(ctx context.Context, formats strfmt.Registry) error {

	if m.Base != nil {

		if err := m.Base.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Base")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RDPEventUpload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RDPEventUpload) UnmarshalBinary(b []byte) error {
	var res RDPEventUpload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
