// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryEvent query event
//
// swagger:model QueryEvent
type QueryEvent struct {

	// Client ID
	ClientID string `json:"clientId,omitempty"`

	// Event ID
	EventID int64 `json:"eventId,omitempty"`

	// event type
	// Enum: ["login","rdp","service","user","createProcessLog","powershell","lsass","system","application","security"]
	EventType string `json:"event_type,omitempty"`

	// IP
	// Example: 127.0.0.1
	IP string `json:"ip,omitempty"`

	// UUID
	// Example: 1234567890
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this query event
func (m *QueryEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var queryEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["login","rdp","service","user","createProcessLog","powershell","lsass","system","application","security"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryEventTypeEventTypePropEnum = append(queryEventTypeEventTypePropEnum, v)
	}
}

const (

	// QueryEventEventTypeLogin captures enum value "login"
	QueryEventEventTypeLogin string = "login"

	// QueryEventEventTypeRdp captures enum value "rdp"
	QueryEventEventTypeRdp string = "rdp"

	// QueryEventEventTypeService captures enum value "service"
	QueryEventEventTypeService string = "service"

	// QueryEventEventTypeUser captures enum value "user"
	QueryEventEventTypeUser string = "user"

	// QueryEventEventTypeCreateProcessLog captures enum value "createProcessLog"
	QueryEventEventTypeCreateProcessLog string = "createProcessLog"

	// QueryEventEventTypePowershell captures enum value "powershell"
	QueryEventEventTypePowershell string = "powershell"

	// QueryEventEventTypeLsass captures enum value "lsass"
	QueryEventEventTypeLsass string = "lsass"

	// QueryEventEventTypeSystem captures enum value "system"
	QueryEventEventTypeSystem string = "system"

	// QueryEventEventTypeApplication captures enum value "application"
	QueryEventEventTypeApplication string = "application"

	// QueryEventEventTypeSecurity captures enum value "security"
	QueryEventEventTypeSecurity string = "security"
)

// prop value enum
func (m *QueryEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryEventTypeEventTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryEvent) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("event_type", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query event based on context it is used
func (m *QueryEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueryEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryEvent) UnmarshalBinary(b []byte) error {
	var res QueryEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
