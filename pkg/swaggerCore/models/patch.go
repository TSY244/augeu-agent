// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Patch patch
//
// swagger:model Patch
type Patch struct {

	// 补丁描述
	// Required: true
	Description *string `json:"Description"`

	// 热修复 ID
	// Required: true
	HotFixID *string `json:"HotFixID"`

	// 安装者
	// Required: true
	InstalledBy *string `json:"InstalledBy"`

	// 安装时间
	// Required: true
	InstalledOn *string `json:"InstalledOn"`
}

// Validate validates this patch
func (m *Patch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotFixID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Patch) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Patch) validateHotFixID(formats strfmt.Registry) error {

	if err := validate.Required("HotFixID", "body", m.HotFixID); err != nil {
		return err
	}

	return nil
}

func (m *Patch) validateInstalledBy(formats strfmt.Registry) error {

	if err := validate.Required("InstalledBy", "body", m.InstalledBy); err != nil {
		return err
	}

	return nil
}

func (m *Patch) validateInstalledOn(formats strfmt.Registry) error {

	if err := validate.Required("InstalledOn", "body", m.InstalledOn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch based on context it is used
func (m *Patch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Patch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Patch) UnmarshalBinary(b []byte) error {
	var res Patch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
