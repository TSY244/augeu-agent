// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventBase event base
//
// swagger:model EventBase
type EventBase struct {

	// event ID
	// Required: true
	EventID *int64 `json:"EventID"`

	// 事件时间，格式：2006-01-02 15:04:05（注意原数据日期时间连写问题）
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"EventTime"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this event base
func (m *EventBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventBase) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("EventID", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *EventBase) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("EventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("EventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventBase) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event base based on context it is used
func (m *EventBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventBase) UnmarshalBinary(b []byte) error {
	var res EventBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
